
# apiVersion: apps/v1
# kind: DaemonSet
# metadata:
#   name: beta-another-placeholder
#   labels:
#     app: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}
#   annotations:
#     specialresource.openshift.io/wait: "false"
#     specialresource.openshift.io/state: "csi-driver"
#     specialresource.openshift.io/driver-container-vendor: auristor-client
#     specialresource.openshift.io/kernel-affine: "true"
# spec:
#   selector:
#     matchLabels:
#       app: another-placeholder
#   template:
#     metadata:
#       labels:
#         app: another-placeholder
#     spec:
#       terminationGracePeriodSeconds: 0
#       containers:
#         - name: simple
#           image: alpine
#           imagePullPolicy: IfNotPresent
#           command: [ "sleep", "1000000"]
          
---


apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}-node

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{.Values.specialresource.metadata.namdriverContainerlues.groupName.driverContainer}}-node
rules:
- apiGroups:
  - security.openshift.io
  resources:
  - securitycontextconstraints
  verbs:
  - use
  resourceNames:
  - {{.Values.specialresource.metadata.namdriverContainerlues.groupName.driverContainer}}-node
  - privileged
---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{.Values.specialresource.metadata.namdriverContainerlues.groupName.driverContainer}}-node
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{.Values.specialresource.metadata.namdriverContainerlues.groupName.driverContainer}}-node
subjects:
- kind: ServiceAccount
  name: {{.Values.specialresource.metadata.namdriverContainerlues.groupName.driverContainer}}-node

---


apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{.Values.specialresource.metadata.namdriverContainerlues.groupName.driverContainer}}-controller

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{.Values.specialresource.metadata.namdriverContainerlues.groupName.driverContainer}}-controller
rules:
- apiGroups:
  - security.openshift.io
  resources:
  - securitycontextconstraints
  verbs:
  - use
  resourceNames:
  - {{.Values.specialresource.metadata.namdriverContainerlues.groupName.driverContainer}}-controller
  - privileged  
  

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{.Values.specialresource.metadata.namdriverContainerlues.groupName.driverContainer}}-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{.Values.specialresource.metadata.namdriverContainerlues.groupName.driverContainer}}-controller
subjects:
- kind: ServiceAccount
  name: {{.Values.specialresource.metadata.namdriverContainerlues.groupName.driverContainer}}-controller


---

allowHostDirVolumePlugin: true
allowHostIPC: false
allowHostNetwork: false
allowHostPID: false
allowHostPorts: false
allowPrivilegedContainer: true
allowedCapabilities: null
apiVersion: security.openshift.io/v1
defaultAddCapabilities: null
fsGroup:
  type: RunAsAny
groups: []
kind: SecurityContextConstraints
metadata:
  annotations:
    kubernetes.io/description: Custom SCC similar to privilege SCC-HOSTPID/HOSTIPC
    release.openshift.io/create-only: "true"
  name: {{.Values.specialresource.metadata.namdriverContainerlues.groupName.driverContainer}}-controller
priority: null
readOnlyRootFilesystem: false
requiredDropCapabilities: null
runAsUser:
  type: RunAsAny
seLinuxContext:
  type: RunAsAny
supplementalGroups:
  type: RunAsAny
users:
- system:serviceaccount:{{.Values.specialresource.spec.namespace}}:{{.Values.specialresource.metadata.namdriverContainerlues.groupName.driverContainer}}-controller
volumes:
- emptyDir
- secret

---

# allowHostDirVolumePlugin: true
# allowHostIPC: false
# allowHostNetwork: false
# allowHostPID: false
# allowHostPorts: false
# allowPrivilegedContainer: true
# allowedCapabilities:
# - 'SYS_ADMIN'
# apiVersion: security.openshift.io/v1
# defaultAddCapabilities: null
# fsGroup:
#   type: RunAsAny
# groups: []
# kind: SecurityContextConstraints
# metadata:
#   annotations:
#     kubernetes.io/description: Custom SCC similar to privilege SCC-HOSTPID/HOSTIPC
#     release.openshift.io/create-only: "true"
#   name: {{.Values.specialresource.metadata.namdriverContainerlues.groupName.driverContainer}}-node
# priority: null
# readOnlyRootFilesystem: false
# requiredDropCapabilities: null
# runAsUser:
#   type: RunAsAny
# seLinuxContext:
#   type: RunAsAny
# supplementalGroups:
#   type: RunAsAny
# users:
# - system:serviceaccount:{{.Values.specialresource.spec.namespace}}:{{.Values.specialresource.metadata.namdriverContainerlues.groupName.driverContainer}}-node
# volumes:
# - hostPath
# - secret



---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{.Values.specialresource.metadata.name}}-csi-role
rules:
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "list", "watch", "create", "delete", "update", "patch"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims/status"]
  verbs: ["patch", "update"]
- apiGroups: ["snapshot.storage.k8s.io"]
  resources: ["volumesnapshotclasses"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["snapshot.storage.k8s.io"]
  resources: ["volumesnapshots"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: ["snapshot.storage.k8s.io"]
  resources: ["volumesnapshotcontents"]
  verbs: ["create", "get", "list", "watch", "update", "delete"]
- apiGroups: ["snapshot.storage.k8s.io"]
  resources: ["volumesnapshots/status"]
  verbs: ["update"]
- apiGroups: ["snapshot.storage.k8s.io"]
  resources: ["volumesnapshotcontents/status"]
  verbs: ["update"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["storage.k8s.io"]
  resources: ["volumeattachments"]
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["list", "watch", "create", "update", "patch", "delete", "get"]
- apiGroups: ["storage.k8s.io"]
  resources: ["csinodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["get", "list", "watch", "create", "update"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["create", "list", "watch", "delete"]
- apiGroups: ["csi.storage.k8s.io"]
  resources: ["csidrivers"]
  verbs: ["create", "delete"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups:
  - security.openshift.io
  resources:
  - securitycontextconstraints
  verbs:
  - use
  resourceNames:
  - privileged
---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{.Values.specialresource.metadata.name}}-csi-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{.Values.specialresource.metadata.name}}-csi-role
subjects:
- kind: ServiceAccount
  name: {{.Values.specialresource.metadata.namdriverContainerlues.groupName.driverContainer}}-controller
  namespace: {{.Values.specialresource.spec.namespace}}

  
  
---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{.Values.specialresource.metadata.name}}-csi-role
rules:
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "list", "watch", "create", "delete", "update", "patch"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims/status"]
  verbs: ["patch", "update"]
- apiGroups: ["snapshot.storage.k8s.io"]
  resources: ["volumesnapshotclasses"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["snapshot.storage.k8s.io"]
  resources: ["volumesnapshots"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: ["snapshot.storage.k8s.io"]
  resources: ["volumesnapshotcontents"]
  verbs: ["create", "get", "list", "watch", "update", "delete"]
- apiGroups: ["snapshot.storage.k8s.io"]
  resources: ["volumesnapshots/status"]
  verbs: ["update"]
- apiGroups: ["snapshot.storage.k8s.io"]
  resources: ["volumesnapshotcontents/status"]
  verbs: ["update"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["storage.k8s.io"]
  resources: ["volumeattachments"]
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["list", "watch", "create", "update", "patch", "delete", "get"]
- apiGroups: ["storage.k8s.io"]
  resources: ["csinodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["get", "list", "watch", "create", "update"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["create", "list", "watch", "delete"]
- apiGroups: ["csi.storage.k8s.io"]
  resources: ["csidrivers"]
  verbs: ["create", "delete"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups:
  - security.openshift.io
  resources:
  - securitycontextconstraints
  verbs:
  - use
  resourceNames:
  - privileged
---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{.Values.specialresource.metadata.name}}-csi-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{.Values.specialresource.metadata.name}}-csi-role
subjects:
- kind: ServiceAccount
  name: {{.Values.specialresource.metadata.namdriverContainerlues.groupName.driverContainer}}-controller
  namespace: {{.Values.specialresource.spec.namespace}}

---

apiVersion: storage.k8s.io/v1
kind: CSIDriver
metadata:
 name: auristorfs.csi.auristor.com
spec:
  volumeLifecycleModes:
  - Persistent
  - Ephemeral
  podInfoOnMount: true
  attachRequired: true


---

apiVersion: v1
kind: ConfigMap
metadata:
  name: auristorfs-csi-controller-config
data:

  externalVolumeManagerURL: {{ .Values.csiDriver.externalVolumeManagerURL }}   
  defaultCacheManager: {{ .Values.csiDriver.defaultCacheManager }}    # kafs or auristor

  logLevel: {{ .Values.csiDriver.logLevel }}
  flattenLog: {{ .Values.csiDriver.flattenLog | quote }}  
  
  # Debugging Values
  pvUIDLength: {{ .Values.csiDriver.pvUIDLength | quote }}
  debugShowCsiRequests: {{ .Values.csiDriver.debugShowCsiRequests  | quote  }}
  debugShowMounts: {{ .Values.csiDriver.debugShowMounts  | quote }}
  debugShowExecs: {{ .Values.csiDriver.debugShowExecs  | quote }}

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{.Values.specialresource.metadata.namdriverContainerlues.groupName.driverContainer}}-controller
  labels:
    app: {{.Values.specialresource.metadata.namdriverContainerlues.groupName.driverContainer}}-controller
  annotations:
    specialresource.openshift.io/wait: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{.Values.specialresource.metadata.namdriverContainerlues.groupName.driverContainer}}-controller
  serviceName: "csi-auristorfs"
  template:
    metadata:
      labels:
        app: {{.Values.specialresource.metadata.namdriverContainerlues.groupName.driverContainer}}-controller
    spec:
      terminationGracePeriodSeconds: {{.Values.csiDriver.terminationGracePeriodSeconds }}

      containers:
        - name: csi-attacher
          image: {{ .Values.csiDriver.k8sSigStorageRegistry }}/csi-attacher:v3.4.0
          imagePullPolicy: IfNotPresent
          # securityContext:
          #   privileged: true          
          args:
            - --v=5
            - --csi-address=/csi/csi.sock
          volumeMounts:
          - mountPath: /csi
            name: controller-socket-dir   
            
        - name: csi-provisioner
          image: {{ .Values.csiDriver.k8sSigStorageRegistry }}/csi-provisioner:v3.1.0
          imagePullPolicy: IfNotPresent
          args:
            - -v=5
            - --csi-address=/csi/csi.sock
            - --volume-name-prefix={{ .Values.volumeNamePrefix}}
            - --volume-name-uuid-length={{ .Values.volumeNameUuidLength}} # DEBUG/TESTING ONLY -  Small value during testing/debugging, otherwise comment/remove arg
            - --extra-create-metadata=true # Include of PVC, PVC-Namespace and PV to be included in Controller.CreateVolume parameteters

          volumeMounts:
            - mountPath: /csi
              name: controller-socket-dir   

        - name: liveness-probe
          image: {{ .Values.csiDriver.k8sSigStorageRegistry }}/livenessprobe:v2.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true              
          args:
            - --csi-address=/csi/csi.sock
            - --probe-timeout=3s
            - --health-port=9898
          volumeMounts:
          - mountPath: /csi
            name: controller-socket-dir               


        - name: controller
          image: {{ .Values.csiDriver.auristorRegistry }}/auristor-csi:{{ .Values.csiDriver.auristorCsiVersion }}
          imagePullPolicy: {{ .Values.csiDriver.csiDriverImagePullPolicy | quote }}
          # securityContext:
          #   privileged: true

      #     envFrom: 
      #     - configMapRef:
      #         name: auristorfs-csi-controller-config
      #     env:
      #       - name: SERVICE_TYPE
      #         value: "Controller"              
      #       - name: KUBERNETES_NODE_NAME
      #         valueFrom:
      #           fieldRef:
      #             apiVersion: v1
      #             fieldPath: spec.nodeName
      #       - name: CSI_DOMAIN_SOCKET
      #         value: "/csi/csi.sock"
      #     # ports:
      #     # - containerPort: 9898
      #     #   name: healthz
      #     #   protocol: TCP
      #     # livenessProbe:                  # TODO - Implement later
      #     #   failureThreshold: 10
      #     #   httpGet:
      #     #     path: /healthz
      #     #     port: healthz
      #     #   initialDelaySeconds: 10
      #     #   timeoutSeconds: 3
      #     #   periodSeconds: 2

      #    volumeMounts:

      #       - mountPath: /csi
      #         name: controller-socket-dir
            
      #       - mountPath: /root/afs
      #         name: afs-root
              
      #       - mountPath: /root/appVar
      #         name: app-var


      volumes:
        - name: controller-socket-dir
          emptyDir: {}
          
      #   - name: afs-root
      #     hostPath:
      #       path: /afs 

      #   - name: app-var
      #     configMap:
      #       name: auristorfs-csi-controller-config        
