apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}
rules:
- apiGroups:
  - security.openshift.io
  resources:
  - securitycontextconstraints
  verbs:
  - use
  resourceNames:
  - privileged
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}
subjects:
- kind: ServiceAccount
  name: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}
  namespace: {{.Values.specialresource.spec.namespace}}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}
  name: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}
  annotations:
    specialresource.openshift.io/wait: "true"
    specialresource.openshift.io/state: "driver-container"
    specialresource.openshift.io/driver-container-vendor: auristor-client
    specialresource.openshift.io/kernel-affine: "true"
spec:
  updateStrategy:
    type: OnDelete
  selector:
    matchLabels:
      app: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}
  template:
    metadata:
      # Mark this pod as a critical add-on; when enabled, the critical add-on scheduler
      # reserves resources for critical add-on pods so that they can be rescheduled after
      # a failure.  This annotation works in tandem with the toleration below.
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
        kfv: {{ .Values.kernelFullVersion  }}
      labels:
        app: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}
    spec:
      serviceAccount: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}
      serviceAccountName: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}
      containers:
      - name: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}

        {{- $kfvSplit := splitList   "." .Values.kernelFullVersion  }}
        {{- $elVersionSplit :=  index $kfvSplit 5 | splitList "_"}}

        image: {{ .Values.kmodDriverContainer.auristorRegistry }}/auristor-kmod-{{ .Values.kmodDriverContainer.auristorKmodVersion }}:
                      {{- index $kfvSplit 0 -}}.{{- index $kfvSplit 1 -}}.{{- index $kfvSplit 2 -}}.
                      {{- index $elVersionSplit 0 -}}.{{- index $kfvSplit 6 }}      
        
        imagePullPolicy: Always
        command: ["/sbin/init"]
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - |
                echo At $(date)  Begin Shutdown  | tee -a /tmp/STOPPING
                echo At $(date)  systemctl status kmod-via-containers@{{.Values.specialresource.metadata.name}} 
                systemctl status kmod-via-containers@{{.Values.specialresource.metadata.name}}  | tee -a /tmp/STOPPING
                echo At $(date)  systemctl stop kmod-via-containers@{{.Values.specialresource.metadata.name}} 
                systemctl stop kmod-via-containers@{{.Values.specialresource.metadata.name}}  | tee -a /tmp/STOPPING                
                while true; do
                  lsmod | grep yfs
                  if [ "$?" -ne 0 ]; then
                      break
                  fi
                  echo At $(date) kmod is still running.... | tee -a /tmp/STOPPING         
                  echo At $(date) rmmod yfs 2>&1 | tee -a /tmp/STOPPING         
                  rmmod yfs 2>&1 | tee -a /tmp/STOPPING       
                  sleep 1
                done
                echo At $(date) kmod unloaded ... exiting | tee -a /tmp/STOPPING
        securityContext:
          privileged: true
        volumeMounts:
        - name: yfs-cache
          mountPath: /var/cache/yfs
          {{- range .Values.kmodDriverContainer.mapVolumes }}
        - name: {{ .label }}
          mountPath: {{ .target }}
          {{ end }}

      nodeSelector:
        node-role.kubernetes.io/worker: ""
        feature.node.kubernetes.io/kernel-version.full: "{{.Values.kernelFullVersion}}"
      volumes:
      - name: yfs-cache
        hostPath: 
          path: {{ .Values.kmodDriverContainer.yfsCache }}
  
      {{- range .Values.kmodDriverContainer.mapVolumes }}
      {{- if .configMap }}
      - name: {{ .label }}
        configMap: 
          name: {{ .label }}
      {{ end -}}  
      {{- end -}}

      {{- range .Values.kmodDriverContainer.mapVolumes }}
      {{- if .secret }}
      - name: {{ .label }}
        secret: 
          secretName: {{ .label }}
      {{ end -}}  
      {{- end -}}